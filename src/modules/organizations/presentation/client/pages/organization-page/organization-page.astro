---
import { Organization } from '@/organizations/domain/organization'
import EventsGridSkeleton from '@/ui/components/events-grid/events-grid-skeleton.astro'
import { Link } from '@/ui/components/link'
import LinkTabs from '@/ui/components/link-tabs/link-tabs.astro'
import { SocialRow } from '@/ui/components/social-row/social-row'
import { Urls } from '@/ui/urls/urls'
import { DeleteOrganizationModal } from '../../components/delete-organization-modal/delete-organization-modal'
import { OrganizationAvatar } from '../../components/organization-avatar/organization-avatar'
import OrganizationEvents from '../../components/organization-events/organization-events.astro'
import { OrganizationFollowButton } from '../../components/organization-follow-button/organization-follow-button'
import OrganizationMeetups from '../../components/organization-meetups/organization-meetups.astro'

interface Props {
  organization: Organization
  userId?: string
  activeTab: 'events' | 'meetups'
}

const { organization, userId, activeTab } = Astro.props as Props
const isOrganizer = userId ? organization.isOrganizer(userId) : false
const isFollowing = userId ? organization.isFollower(userId) : false
---

<article class="organization">
  <header class="header">
    <OrganizationAvatar client:load organization={organization.toPrimitives()} />
    <h1 class="text-4xl font-semibold text-foreground">
      {organization.name}
    </h1>
    <div class="summary">
      <span>@{organization.handle}</span>
      {
        organization.location && (
          <>
            <span>·</span>
            <span>{organization.location}</span>
          </>
        )
      }
      <span>·</span><span>{organization.followersCount()} seguidores</span>
    </div>
    <p class="bio">{organization.bio}</p>
    <SocialRow {...organization.toPrimitives()} className="justify-center" />

    {
      userId && isOrganizer && (
        <section class="actions">
          <Link variant="secondary" href={Urls.ORGANIZATION_EDIT(organization.handle)}>
            Editar
          </Link>
          <DeleteOrganizationModal client:idle organizationId={organization.id.value} />
        </section>
      )
    }
    {
      userId && !isOrganizer && (
        <section class="actions">
          <OrganizationFollowButton
            client:load
            organizationId={organization.id.value}
            userId={userId}
            isFollowing={isFollowing}
          />
        </section>
      )
    }
  </header>

  <section class="space-y-8">
    <LinkTabs
      tabs={[
        { label: 'Eventos', href: Urls.ORGANIZATION_EVENTS(organization.handle), isActive: activeTab === 'events' },
        { label: 'Meetups', href: Urls.ORGANIZATION_MEETUPS(organization.handle), isActive: activeTab === 'meetups' },
      ]}
    />
    {
      activeTab === 'events' && (
        <OrganizationEvents organization={organization} isOrganizer={isOrganizer} server:defer>
          <EventsGridSkeleton slot="fallback" />
        </OrganizationEvents>
      )
    }
    {
      activeTab === 'meetups' && (
        <OrganizationMeetups organization={organization} isOrganizer={isOrganizer} server:defer>
          <EventsGridSkeleton slot="fallback" />
        </OrganizationMeetups>
      )
    }
  </section>
</article>

<style>
  @reference "../../../../../../styles/global.css";

  .organization {
    @apply flex flex-col items-stretch gap-y-16 py-24;
  }

  .header {
    @apply flex flex-col items-center gap-4;
  }

  .summary {
    @apply flex items-center gap-4 font-medium;
  }

  .bio {
    @apply max-w-prose whitespace-break-spaces text-balance;
  }

  .actions {
    @apply flex items-stretch gap-2;
  }
</style>

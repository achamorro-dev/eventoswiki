---
import type { Event } from '@/events/domain/event'
import type { Meetup } from '@/meetups/domain/meetup'
import EventCard from '@/ui/components/event-card/event-card.astro'
import { Search } from '@/ui/icons'
import { EmptyMessage } from '../empty-message/empty-message'
import Pagination from '../pagination/pagination.astro'

interface Props {
  page: number
  totalPages: number
  events: Event[] | Meetup[]
  goToEvent: (slug: string) => string
}

const { events = [], page, totalPages, goToEvent } = Astro.props
---

<article>
  <ul class="grid-list">
    {
      events.map((event: Event | Meetup) => {
        return (
          <li>
            <EventCard
              event={{
                slug: event.slug,
                title: event.title,
                image: event.image.toString(),
                tags: event.tags,
                tagColor: event.tagColor,
                startsAt: event.startsAt,
                endsAt: event.endsAt,
                location: event.location,
              }}
              goToEvent={goToEvent}
            />
          </li>
        )
      })
    }
  </ul>

  {
    events.length === 0 && (
      <slot name="empty">
        <EmptyMessage
          icon={Search}
          title="No se encontraron resultados"
          description="Intenta con otros términos de búsqueda o filtros diferentes."
        />
      </slot>
    )
  }
  {
    totalPages > 1 && (
      <nav class="footer">
        <Pagination totalPages={totalPages} page={page} />
      </nav>
    )
  }
</article>

<style>
  @reference "../../../../../../styles/global.css";

  .grid-list {
    @apply grid grid-cols-1 items-stretch gap-4 md:grid-cols-2 lg:grid-cols-3 lg:gap-12 2xl:grid-cols-4;
  }
  .empty-message {
    @apply text-muted-foreground mt-4 text-sm;
  }
  .footer {
    @apply mt-8;
  }
</style>

---
import { PiCaretUpDown } from 'react-icons/pi'
import IconButton from '../../buttons/icon-button.astro'
import BaseInput from '../base-input/base-input.astro'
import InputText from '../input-text/input-text.astro'
import type { Input } from '../types/input'

interface ComboboxOptions {
  label: string
  value: string
}
interface Props extends Input {
  label?: string
  placeholder?: string
  options?: ComboboxOptions[]
}

const { label, placeholder, value, options = [], id = 'combobox', ...rest } = Astro.props
---

<ew-combobox id={id} data-value={value}>
  <div class="combobox">
    <BaseInput label={label}>
      <section class="input-combobox-wrapper">
        <InputText
          id={`input-${id}`}
          classes="input-combobox"
          role={'combobox'}
          placeholder={placeholder}
          aria-expanded={'false'}
          aria-haspopup={'listbox'}
          aria-controls={`list-${id}`}
          {...rest}
          readonly
        />
        <IconButton classes={'input-combobox-button'} tabindex={-1}>
          <PiCaretUpDown />
        </IconButton>
      </section>
      <ul class="combobox-options" id={`list-${id}`} role="listbox" aria-labelledby={id} tabindex="-1">
        {
          options?.map(option => (
            <li
              id={`list-item-${id}`}
              data-value={option.value}
              role="option"
              aria-selected={value === option.value ? 'true' : 'false'}
              tabindex="0"
            >
              {option.label.trim()}
            </li>
          ))
        }
      </ul>
    </BaseInput>

    <style>
      .combobox {
        @apply relative flex cursor-default flex-col gap-px;
      }
      .input-combobox-wrapper {
        @apply relative;
      }
      .input-combobox-hidden {
        @apply hidden;
      }
      .input-combobox {
        @apply cursor-default pr-6;
      }
      .input-combobox-button {
        @apply pointer-events-none absolute right-1 top-1/2 -translate-y-1/2 text-input-foreground dark:text-input-foreground-dark;
      }
      .combobox-options {
        @apply absolute left-0 top-full z-10 mt-1 hidden max-h-56 w-full list-none overflow-y-scroll rounded-md bg-input text-input-foreground shadow-lg ring-1 ring-border dark:bg-input-dark dark:text-input-foreground-dark;
      }
      .combobox-options[aria-expanded='true'] {
        @apply block;
      }
      .combobox-options [role='option'] {
        @apply px-2 py-1 hover:bg-primary-light hover:text-primary-foreground focus:bg-primary-light focus:text-primary-foreground;
      }
      .combobox-options [role='option'][aria-selected='true'] {
        @apply bg-primary text-primary-foreground;
      }
    </style>
  </div>
</ew-combobox>

<script>
  import type { Input } from '../types/input'

  class Combobox extends HTMLElement {
    isOpen: boolean
    combobox: HTMLInputElement | null
    listbox: HTMLDivElement | null
    allOptions: HTMLLIElement[]
    option?: HTMLLIElement
    value?: Input['value']

    constructor() {
      super()
      this.isOpen = false
      this.option = undefined
      this.value = this.dataset.value

      this.combobox = this.querySelector(`[role='combobox']`)
      this.listbox = this.querySelector(`[role='listbox']`)
      this.allOptions = Array.from(this.listbox?.querySelectorAll(`[role="option"]`) || [])

      this.initialize()
    }

    open = () => {
      this.isOpen = true
      this.listbox?.setAttribute('aria-expanded', 'true')
      this.combobox?.setAttribute('aria-expanded', 'true')
    }

    close() {
      this.isOpen = false
      this.listbox?.setAttribute('aria-expanded', 'false')
      this.combobox?.setAttribute('aria-expanded', 'false')
      this.combobox?.focus()
    }

    selectOption(option: HTMLLIElement, close = false) {
      this.allOptions.forEach(a => (a.ariaSelected = 'false'))

      if (this.combobox && option) {
        this.combobox.value = option.textContent?.trim() || ''
        this.value = option.dataset.value?.trim() || ''
        option.ariaSelected = 'true'
        this.option = option
      }

      this.dispatchEvent(new Event('change'))

      if (!close) return

      this.close()
    }

    private initialize = () => {
      this.initializeInputValue()
      this.addListeners()
    }

    private onBlur = (event: FocusEvent) => {
      if (this.listbox?.contains(event.target as HTMLElement)) return

      this.combobox?.setAttribute('aria-activedescendant', '')

      if (this.isOpen) {
        this.close()
      }
    }

    private onComboboxClick() {
      this.isOpen ? this.close() : this.open()
    }

    private onComboboxKeyDown(event: KeyboardEvent) {
      const { ctrlKey, shiftKey, altKey, key } = event
      let shouldStopPropagation = false

      if (ctrlKey || shiftKey) return

      switch (key) {
        case 'Esc':
        case 'Escape':
          if (this.isOpen) {
            this.close()
            this.combobox?.focus()
          }

          shouldStopPropagation = true
          break
        case 'Down':
        case 'ArrowDown':
          if (!this.isOpen) {
            this.open()
          }

          if (!altKey) {
            this.focusNextOption()
          }

          shouldStopPropagation = true
          break
        case 'Up':
        case 'ArrowUp':
          if (!this.isOpen) {
            this.open()

            if (!altKey) {
              this.focusPreviousOption()
            }
            shouldStopPropagation = true
          }

          break
      }

      if (shouldStopPropagation) {
        event.stopPropagation()
        event.preventDefault()
      }
    }

    private onOptionKeyDown(event: KeyboardEvent) {
      const { key } = event
      let shouldStopPropagation = false

      switch (key) {
        case 'Enter':
        case 'Space':
          if (this.option) this.selectOption(this.option, true)
          break
        case 'Esc':
        case 'Escape':
          this.close()
          this.combobox?.focus()
          break
        case 'ArrowUp':
          this.focusPreviousOption()
          shouldStopPropagation = true
          break
        case 'ArrowDown':
          this.focusNextOption()
          shouldStopPropagation = true
          break
      }

      if (shouldStopPropagation) {
        event.stopPropagation()
        event.preventDefault()
      }
    }

    private onOptionClick(event: MouseEvent) {
      event.stopPropagation()
      this.selectOption(event.target as HTMLLIElement, true)
    }

    private focusNextOption() {
      const firstOption = this.allOptions.at(0)
      if (!this.option) {
        if (firstOption) {
          this.focusOption(firstOption)
          return
        }
      }

      const nextOption = this.option?.nextElementSibling as HTMLLIElement
      if (nextOption) {
        this.focusOption(nextOption)
        return
      }

      if (firstOption) {
        this.focusOption(firstOption)
        return
      }
    }

    private focusPreviousOption() {
      const lastOption = this.allOptions.at(-1)
      if (!this.option) {
        if (lastOption) {
          this.focusOption(lastOption)
          return
        }
      }

      const previousOption = this.option?.previousElementSibling as HTMLLIElement
      if (previousOption) {
        this.focusOption(previousOption)
        return
      }

      if (lastOption) {
        this.focusOption(lastOption)
        return
      }
    }

    private focusOption(option: HTMLLIElement, close = false) {
      this.option = option
      this.combobox?.setAttribute('aria-activedescendant', option.id)
      option.focus()
      close && this.close()
    }

    private onDocumentClick(event: MouseEvent) {
      if (this.isOpen && this.contains(event.target as HTMLElement)) return

      if (this.isOpen) this.close()
    }

    private initializeInputValue() {
      if (!this.combobox) return

      const selectedOption = this.getOptionByValue(this.value)
      this.combobox.value = selectedOption?.textContent?.trim() || ''
      this.option = selectedOption
    }

    private getOptionByValue(value: Combobox['value']): HTMLLIElement | undefined {
      return this.allOptions.find(option => option.dataset.value === value)
    }

    private addListeners() {
      if (this.combobox?.disabled) return

      this.combobox!.addEventListener('click', this.onComboboxClick.bind(this))
      this.combobox!.addEventListener('keydown', this.onComboboxKeyDown.bind(this))
      this.listbox!.addEventListener('focusout', this.onBlur.bind(this))
      document.addEventListener('click', this.onDocumentClick.bind(this))

      this.allOptions.forEach(option => {
        option.addEventListener('keydown', this.onOptionKeyDown.bind(this))
        option.addEventListener('click', this.onOptionClick.bind(this))
      })
    }
  }

  customElements.define('ew-combobox', Combobox)
</script>
